#!/bin/bash
set -euo pipefail

# BlueLab First Boot Configuration Script
# This script runs once on first boot to configure the homelab system

SCRIPT_NAME="bluelab-first-boot"
LOG_FILE="/var/log/bluelab-first-boot.log"
CONFIG_DIR="/var/lib/bluelab"
COMPLETION_MARKER="$CONFIG_DIR/.first-boot-complete"

# Logging function
log() {
    local level="$1"
    shift
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $*" | tee -a "$LOG_FILE"
}

log_info() { log "INFO" "$@"; }
log_warn() { log "WARN" "$@"; }
log_error() { log "ERROR" "$@"; }

# Exit handler
cleanup() {
    local exit_code=$?
    if [ $exit_code -eq 0 ]; then
        log_info "BlueLab first boot completed successfully"
        touch "$COMPLETION_MARKER"
    else
        log_error "BlueLab first boot failed with exit code $exit_code"
    fi
    exit $exit_code
}
trap cleanup EXIT

log_info "Starting BlueLab first boot configuration"

# Wait for system to fully settle after initial setup
if [[ "${BLUELAB_AUTO_INSTALL:-false}" == "true" ]]; then
    log_info "Running in auto-install mode, waiting for system to settle..."
    sleep 30
    
    # Wait for initial setup services to complete
    for service in gnome-initial-setup initial-setup; do
        if systemctl is-active --quiet $service 2>/dev/null; then
            log_info "Waiting for $service to complete..."
            timeout 300 bash -c "while systemctl is-active --quiet $service; do sleep 5; done" || true
        fi
    done
fi

# Check if already completed
if [ -f "$COMPLETION_MARKER" ]; then
    log_info "First boot already completed, exiting"
    exit 0
fi

# Future: Check BlueBuild live ISO capabilities
check_bluebuild_live_capabilities() {
    log_info "Checking BlueBuild live ISO generation capabilities (future feature)"
    
    # TODO: Post-1.0 - Monitor BlueBuild for live ISO support
    # As of 2025, BlueBuild is moving away from Anaconda (see: https://blue-build.org/blog/dnf-module/)
    # This function will be expanded to detect when live ISO generation becomes available
    
    # Future implementation might check:
    # - BlueBuild version/capabilities
    # - Available ISO generation methods
    # - Live boot parameter support
    
    # For now, always return false (installer-only mode)
    export BLUELAB_LIVE_ISO_AVAILABLE="false"
    export BLUELAB_AUTOMATED_INSTALL_AVAILABLE="false"
    
    log_info "Live ISO generation: Not yet available (installer mode only)"
    log_info "Future: Will enable iVentoy parameter automation when BlueBuild supports it"
}

# Parse kernel parameters for iVentoy configuration (FUTURE - Post-1.0)
parse_kernel_parameters() {
    # Check if automated install mode is available
    check_bluebuild_live_capabilities
    
    if [ "$BLUELAB_AUTOMATED_INSTALL_AVAILABLE" = "true" ]; then
        log_info "Parsing kernel parameters for BlueLab configuration"
        
        # Read kernel command line
        local cmdline
        cmdline=$(cat /proc/cmdline)
        
        # Extract BlueLab parameters (bluelab.* format)
        export BLUELAB_USERNAME=""
        export BLUELAB_PASSWORD=""
        export BLUELAB_HOSTNAME=""
        export BLUELAB_TIMEZONE=""
        export BLUELAB_STACK_SELECTION=""
        export BLUELAB_TAILSCALE_KEY=""
        
        # Parse each parameter
        for param in $cmdline; do
            case "$param" in
                bluelab.username=*)
                    BLUELAB_USERNAME="${param#*=}"
                    log_info "Found username parameter: $BLUELAB_USERNAME"
                    ;;
                bluelab.password=*)
                    BLUELAB_PASSWORD="${param#*=}"
                    log_info "Found password parameter (hidden)"
                    ;;
                bluelab.hostname=*)
                    BLUELAB_HOSTNAME="${param#*=}"
                    log_info "Found hostname parameter: $BLUELAB_HOSTNAME"
                    ;;
                bluelab.timezone=*)
                    BLUELAB_TIMEZONE="${param#*=}"
                    log_info "Found timezone parameter: $BLUELAB_TIMEZONE"
                    ;;
                bluelab.stacks=*)
                    BLUELAB_STACK_SELECTION="${param#*=}"
                    log_info "Found stack selection: $BLUELAB_STACK_SELECTION"
                    ;;
                bluelab.tailscale_key=*)
                    BLUELAB_TAILSCALE_KEY="${param#*=}"
                    log_info "Found Tailscale auth key (hidden)"
                    ;;
            esac
        done
    else
        log_info "Automated install not available - using interactive mode"
        # Initialize empty variables for interactive setup
        export BLUELAB_USERNAME=""
        export BLUELAB_PASSWORD=""
        export BLUELAB_HOSTNAME=""
        export BLUELAB_TIMEZONE=""
        export BLUELAB_STACK_SELECTION=""
        export BLUELAB_TAILSCALE_KEY=""
    fi
}


# Credential management system
setup_credential_strategy() {
    log_info "Setting up BlueLab credential management"
    
    echo ""
    echo "=== BlueLab Credential Management ==="
    echo "Multiple services will ask for usernames and passwords."
    echo "You can choose how to handle this:"
    echo ""
    echo "1. Use system credentials (simple - use your current username/password)"
    echo "2. Create single app-specific credentials (one username/password for all services)"
    echo "3. Generate unique credentials per service (most secure - auto-generated)"
    echo ""
    
    # Use default option (1) if non-interactive
    if [[ -t 0 ]] && [[ "${BLUELAB_AUTO_INSTALL:-false}" != "true" ]]; then
        read -p "Choose credential strategy [1-3, default: 1]: " cred_choice
    else
        log_info "Non-interactive mode: using default credential strategy (1 - system credentials)"
        cred_choice="1"
    fi
    cred_choice=${cred_choice:-1}
    
    case "$cred_choice" in
        1)
            setup_system_credentials
            ;;
        2)
            setup_single_app_credentials
            ;;
        3)
            setup_generated_credentials
            ;;
        *)
            log_info "Invalid choice, using system credentials"
            setup_system_credentials
            ;;
    esac
}

# Use system username and password
setup_system_credentials() {
    log_info "Using system credentials for all BlueLab services"
    
    # Get current user (the one who will own the services)
    local current_user
    current_user=$(who am i | awk '{print $1}' 2>/dev/null || echo "$SUDO_USER")
    
    if [ -z "$current_user" ]; then
        current_user=$(id -un 1000 2>/dev/null || echo "bluelab")
    fi
    
    BLUELAB_USERNAME="$current_user"
    
    echo "Username: $BLUELAB_USERNAME"
    
    # Use default password if non-interactive or already set
    if [[ -n "$BLUELAB_PASSWORD" ]]; then
        log_info "Using pre-configured password"
    elif [[ -t 0 ]] && [[ "${BLUELAB_AUTO_INSTALL:-false}" != "true" ]]; then
        read -s -p "Enter your system password: " BLUELAB_PASSWORD
        echo
    else
        # Generate a default password for non-interactive mode
        BLUELAB_PASSWORD="bluelab123"
        log_info "Non-interactive mode: using default password"
    fi
    
    export BLUELAB_CREDENTIAL_STRATEGY="system"
    export BLUELAB_CREDENTIAL_FILE=""
    
    log_info "System credentials configured"
}

# Create single app-specific credentials
setup_single_app_credentials() {
    log_info "Creating single app-specific credentials"
    
    echo ""
    echo "Create a single username and password for all BlueLab services:"
    
    while [ -z "$BLUELAB_USERNAME" ]; do
        read -p "Enter app username: " BLUELAB_USERNAME
        if [ -z "$BLUELAB_USERNAME" ]; then
            echo "Username cannot be empty. Please try again."
        fi
    done
    
    while [ -z "$BLUELAB_PASSWORD" ]; do
        read -s -p "Enter app password: " BLUELAB_PASSWORD
        echo
        if [ -z "$BLUELAB_PASSWORD" ]; then
            echo "Password cannot be empty. Please try again."
        fi
    done
    
    export BLUELAB_CREDENTIAL_STRATEGY="single"
    export BLUELAB_CREDENTIAL_FILE=""
    
    log_info "Single app credentials configured"
}

# Generate unique credentials per service
setup_generated_credentials() {
    log_info "Generating unique credentials per service"
    
    echo ""
    echo "Generating secure credentials for each service..."
    
    # Create credentials directory
    mkdir -p "$CONFIG_DIR/credentials"
    local cred_file="$CONFIG_DIR/credentials/service-credentials.json"
    
    # Generate master credentials for system management
    BLUELAB_USERNAME="bluelab-admin"
    BLUELAB_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    
    # Generate service-specific credentials
    local services=("homepage" "dockge" "jellyfin" "sonarr" "radarr" "navidrome" "immich" "calibre" "nextcloud")
    
    cat > "$cred_file" << EOF
{
  "generated_date": "$(date -Iseconds)",
  "strategy": "generated",
  "master_admin": {
    "username": "$BLUELAB_USERNAME",
    "password": "$BLUELAB_PASSWORD",
    "note": "Master admin account for system management"
  },
  "services": {
EOF

    local first_service=true
    for service in "${services[@]}"; do
        local service_user="${service}-admin"
        local service_pass=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
        
        if [ "$first_service" = true ]; then
            first_service=false
        else
            echo "," >> "$cred_file"
        fi
        
        cat >> "$cred_file" << EOF
    "$service": {
      "username": "$service_user",
      "password": "$service_pass",
      "note": "Auto-generated credentials for $service"
    }
EOF
    done
    
    cat >> "$cred_file" << EOF
  },
  "bitwarden_import": {
    "ready": true,
    "note": "This file can be imported into Bitwarden when Security Stack is added"
  }
}
EOF

    # Set secure permissions
    chmod 600 "$cred_file"
    chown root:root "$cred_file"
    
    export BLUELAB_CREDENTIAL_STRATEGY="generated"
    export BLUELAB_CREDENTIAL_FILE="$cred_file"
    
    echo ""
    echo "✅ Unique credentials generated for all services"
    echo "📁 Credential file: $cred_file"
    echo "🔒 File permissions: 600 (root only)"
    echo ""
    echo "🛡️  Future: This file can be imported into Bitwarden (Security Stack)"
    echo "💡 Your master admin credentials:"
    echo "   Username: $BLUELAB_USERNAME"
    echo "   Password: [stored securely in credential file]"
    
    log_info "Generated credentials configured and saved securely"
}

# Display welcome message
display_welcome_message() {
    echo ""
    echo "=============================================================================="
    
    # Try to read custom welcome message, fallback to default
    local welcome_file="/usr/share/bluelab/config/welcome-message.txt"
    if [ -f "$welcome_file" ]; then
        cat "$welcome_file"
    else
        # Fallback welcome message
        cat << 'EOF'
🏠 Welcome to BlueLab - Your Personal Homelab System

BlueLab transforms your computer into a powerful homelab server with professional-grade 
services that are simple to manage. You're about to configure a system that rivals 
commercial cloud services, but runs entirely under your control.

What you're getting:
• Homepage Dashboard - Your mission control center  
• Dockge Container Manager - Professional Docker management
• Hostname-based access (bluelab.local) - No more remembering IP addresses
• Remote access via Tailscale - Secure access from anywhere
• Professional credential management - Enterprise-grade security options

This setup will take 5-10 minutes and will ask you a few simple questions.
Everything can be reconfigured later using 'ujust bluelab-interactive-setup' command.

Let's build your personal cloud infrastructure!
EOF
    fi
    
    echo "=============================================================================="
    echo ""
    
    # Skip interactive prompt if running as systemd service or non-interactive
    if [[ -t 0 ]] && [[ "${BLUELAB_AUTO_INSTALL:-false}" != "true" ]]; then
        read -p "Press Enter to continue with BlueLab setup..."
    else
        log_info "Running in non-interactive mode, continuing automatically..."
        sleep 2
    fi
    echo ""
}

# Interactive setup for remaining parameters
interactive_setup() {
    log_info "Starting interactive BlueLab setup"
    
    # Display welcome message
    display_welcome_message
    
    # Set up credential strategy first
    setup_credential_strategy
    
    # Hostname
    if [ -z "$BLUELAB_HOSTNAME" ]; then
        if [[ -t 0 ]] && [[ "${BLUELAB_AUTO_INSTALL:-false}" != "true" ]]; then
            read -p "Enter hostname for this system [bluelab]: " BLUELAB_HOSTNAME
        else
            log_info "Non-interactive mode: using default hostname (bluelab)"
        fi
        BLUELAB_HOSTNAME="${BLUELAB_HOSTNAME:-bluelab}"
    fi
    
    # Timezone
    if [ -z "$BLUELAB_TIMEZONE" ]; then
        if [[ -t 0 ]] && [[ "${BLUELAB_AUTO_INSTALL:-false}" != "true" ]]; then
            read -p "Enter timezone [America/New_York]: " BLUELAB_TIMEZONE
        else
            log_info "Non-interactive mode: using default timezone (America/New_York)"
        fi
        BLUELAB_TIMEZONE="${BLUELAB_TIMEZONE:-America/New_York}"
    fi
    
    # Stack selection
    if [ -z "$BLUELAB_STACK_SELECTION" ]; then
        echo ""
        echo "=== Service Stack Selection ==="
        echo "📊 Monitoring Stack: MANDATORY (Homepage dashboard + Dockge container manager)"
        echo ""
        echo "📦 Additional Stacks (Phase 2+ features):"
        echo "  • media       - Jellyfin, Sonarr, Radarr, etc."
        echo "  • audio       - Navidrome, Lidarr, etc."  
        echo "  • photos      - Immich photo management"
        echo "  • books       - Calibre, Readarr"
        echo "  • productivity - Nextcloud"
        echo "  • gaming      - Steam, Lutris integration"
        echo "  • smb-share   - File sharing with ZFS"
        echo ""
        if [[ -t 0 ]] && [[ "${BLUELAB_AUTO_INSTALL:-false}" != "true" ]]; then
            read -p "Enter additional stacks to install (optional): " BLUELAB_STACK_SELECTION
        else
            log_info "Non-interactive mode: installing monitoring stack only"
        fi
        BLUELAB_STACK_SELECTION="${BLUELAB_STACK_SELECTION:-}"
    fi
    
    # Tailscale auth key (optional)
    if [ -z "$BLUELAB_TAILSCALE_KEY" ]; then
        if [[ -t 0 ]] && [[ "${BLUELAB_AUTO_INSTALL:-false}" != "true" ]]; then
            read -p "Enter Tailscale auth key (optional, press Enter to skip): " BLUELAB_TAILSCALE_KEY
        else
            log_info "Non-interactive mode: skipping Tailscale setup"
            BLUELAB_TAILSCALE_KEY=""
        fi
    fi
    
    # TODO: Phase 2+ - ZFS Personal Cloud Drive Setup
    # if [ -z "$BLUELAB_CREATE_CLOUD_DRIVE" ]; then
    #     echo ""
    #     echo "=== Storage Configuration ==="
    #     echo "📦 Detected drives:"
    #     # Display available drives with sizes
    #     # lsblk -d -o NAME,SIZE,TYPE | grep disk
    #     echo ""
    #     read -p "Create a personal cloud drive from your largest drive? [y/N]: " BLUELAB_CREATE_CLOUD_DRIVE
    #     BLUELAB_CREATE_CLOUD_DRIVE="${BLUELAB_CREATE_CLOUD_DRIVE:-n}"
    #     
    #     if [[ "$BLUELAB_CREATE_CLOUD_DRIVE" =~ ^[Yy]$ ]]; then
    #         echo "✅ Will setup ZFS + SMB personal cloud storage on largest drive"
    #         echo "📁 Accessible via: \\\\bluelab.local\\cloud or \\\\bluelab\\cloud (Tailscale)"
    #         export BLUELAB_SETUP_ZFS_CLOUD="true"
    #     fi
    # fi
    
    # Network configuration
    setup_network_preference
}

# Network configuration to prevent IP changes
setup_network_preference() {
    local current_ip
    current_ip=$(hostname -I | awk '{print $1}')
    
    echo ""
    echo "=== Network Configuration ==="
    echo "Current IP address: $current_ip"
    echo ""
    echo "IMPORTANT: Your services will be accessible at this IP address."
    echo "If your router uses DHCP, this IP might change when you restart."
    echo ""
    echo "Options to ensure stable access:"
    echo "1. Use easy-to-remember names like 'bluelab.local' (RECOMMENDED)"
    echo "2. Configure static IP on this computer"  
    echo "3. Set up DHCP reservation in your router"
    echo "4. Continue with current setup (IP may change)"
    echo ""
    echo "We recommend option 1 - it uses names instead of numbers"
    echo "and works even if your IP address changes!"
    echo ""
    
    # Use default option (1) if non-interactive
    if [[ -t 0 ]] && [[ "${BLUELAB_AUTO_INSTALL:-false}" != "true" ]]; then
        read -p "Choose option [1-4, default: 1]: " network_choice
    else
        log_info "Non-interactive mode: using recommended hostname-based access (option 1)"
        network_choice="1"
    fi
    network_choice=${network_choice:-1}
    
    case "$network_choice" in
        1)
            setup_hostname_access
            ;;
        2)
            setup_static_ip
            ;;
        3)
            setup_dhcp_reservation_guide
            ;;
        4)
            log_info "Continuing with current DHCP setup"
            echo "Note: If IP changes, update bookmarks to new IP address"
            ;;
        *)
            log_info "Invalid choice, using recommended hostname setup"
            setup_hostname_access
            ;;
    esac
}

# Guide user through DHCP reservation
setup_dhcp_reservation_guide() {
    local mac_address
    local interface
    interface=$(ip route | grep default | awk '{print $5}' | head -1)
    mac_address=$(cat "/sys/class/net/$interface/address")
    
    echo ""
    echo "=== DHCP Reservation Setup Guide ==="
    echo "To set up DHCP reservation in your router:"
    echo ""
    echo "1. Open your router's admin interface (usually http://192.168.1.1)"
    echo "2. Look for 'DHCP Reservations' or 'Static DHCP' settings"
    echo "3. Add a new reservation with these details:"
    echo "   - MAC Address: $mac_address"
    echo "   - IP Address: $(hostname -I | awk '{print $1}')"
    echo "   - Description: BlueLab Server"
    echo ""
    echo "This ensures this computer always gets the same IP address."
    echo ""
    read -p "Press Enter when done (or Ctrl+C to skip)..."
    log_info "DHCP reservation setup completed by user"
}

# Configure static IP
setup_static_ip() {
    local current_ip gateway dns interface
    current_ip=$(hostname -I | awk '{print $1}')
    gateway=$(ip route | grep default | awk '{print $3}' | head -1)
    dns=$(grep -m1 nameserver /etc/resolv.conf | awk '{print $2}')
    interface=$(ip route | grep default | awk '{print $5}' | head -1)
    
    echo ""
    echo "=== Static IP Configuration ==="
    echo "Current settings:"
    echo "  IP: $current_ip"
    echo "  Gateway: $gateway"
    echo "  DNS: $dns"
    echo "  Interface: $interface"
    echo ""
    
    read -p "Configure static IP with these settings? [Y/n]: " confirm
    if [[ "$confirm" =~ ^[Nn] ]]; then
        log_info "Static IP configuration skipped"
        return
    fi
    
    log_info "Configuring static IP address"
    
    # Get current connection name
    local connection_name
    connection_name=$(nmcli -t -f NAME connection show --active | head -1)
    
    if [ -n "$connection_name" ]; then
        # Configure static IP
        nmcli connection modify "$connection_name" ipv4.method manual
        nmcli connection modify "$connection_name" ipv4.addresses "${current_ip}/24"
        nmcli connection modify "$connection_name" ipv4.gateway "$gateway"
        nmcli connection modify "$connection_name" ipv4.dns "$dns"
        
        # Restart connection
        nmcli connection down "$connection_name"
        nmcli connection up "$connection_name"
        
        log_info "Static IP configured successfully"
        echo "Your IP address is now static: $current_ip"
    else
        log_error "Could not find active network connection"
    fi
}

# Set up hostname-based access using "bluelab"
setup_hostname_access() {
    log_info "Setting up BlueLab hostname-based access"
    
    # Set system hostname to "bluelab" for consistent branding
    local current_hostname
    current_hostname=$(hostname)
    
    if [ "$current_hostname" != "bluelab" ]; then
        log_info "Setting system hostname to 'bluelab'"
        hostnamectl set-hostname bluelab
        # Update /etc/hosts for immediate resolution
        sed -i '/127.0.1.1/d' /etc/hosts
        echo "127.0.1.1 bluelab bluelab.local" >> /etc/hosts
    fi
    
    # Ensure avahi-daemon is running for .local resolution
    if systemctl is-active --quiet avahi-daemon; then
        log_info "Avahi daemon is already running"
    else
        log_info "Starting Avahi daemon for .local hostname resolution"
        systemctl enable --now avahi-daemon
    fi
    
    echo ""
    echo "=== BlueLab Hostname Access Configured ==="
    echo "Your services will be accessible at:"
    echo "  LOCAL NETWORK:"
    echo "    - http://bluelab.local:3000 (Homepage)"
    echo "    - http://bluelab.local:5001 (Dockge)"
    echo ""
    
    # If Tailscale will be configured, mention remote access
    if [ -n "$BLUELAB_TAILSCALE_KEY" ]; then
        echo "  REMOTE ACCESS (via Tailscale):"
        echo "    - http://bluelab:3000 (Homepage - from any Tailscale device)"
        echo "    - http://bluelab:5001 (Dockge - from any Tailscale device)"
        echo ""
    fi
    
    echo "Benefits:"
    echo "  ✓ Easy to remember (no IP addresses!)"
    echo "  ✓ Works even if IP changes"
    echo "  ✓ Same bookmarks work everywhere"
    echo "  ✓ BlueLab branding in every URL"
    echo ""
    
    # Store preference for later use
    export BLUELAB_USE_HOSTNAME="true"
    export BLUELAB_HOSTNAME_LOCAL="bluelab.local"
    export BLUELAB_HOSTNAME_REMOTE="bluelab"
}

# Create directory structure
setup_directories() {
    log_info "Setting up BlueLab directory structure"
    
    # Create main directories
    mkdir -p "$CONFIG_DIR"/{config,stacks,data,backups}
    mkdir -p "$CONFIG_DIR/data"/{monitoring,media,audio,photos,books,productivity,gaming,smb-share}
    
    # Set permissions
    chown -R root:root "$CONFIG_DIR"
    chmod 755 "$CONFIG_DIR"
    chmod 700 "$CONFIG_DIR/config"
    
    log_info "Directory structure created successfully"
}

# Configure user account and Docker access
setup_user() {
    log_info "Setting up user account: $BLUELAB_USERNAME"
    
    # Create user if doesn't exist
    if ! id "$BLUELAB_USERNAME" &>/dev/null; then
        useradd -m -s /bin/bash -G wheel "$BLUELAB_USERNAME"
        log_info "Created user: $BLUELAB_USERNAME"
    else
        log_info "User already exists: $BLUELAB_USERNAME"
    fi
    
    # Set password
    echo "$BLUELAB_USERNAME:$BLUELAB_PASSWORD" | chpasswd
    log_info "Password set for user: $BLUELAB_USERNAME"
    
    # Configure sudo
    echo "$BLUELAB_USERNAME ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$BLUELAB_USERNAME"
    chmod 440 "/etc/sudoers.d/$BLUELAB_USERNAME"
    log_info "Sudo configured for user: $BLUELAB_USERNAME"
    
    # Set up Docker groups using ujust dx-group (Bluefin-DX specific)
    log_info "Setting up Docker and development groups for Bluefin-DX"
    if command -v ujust &>/dev/null; then
        # Run as the target user to ensure proper group assignment
        sudo -u "$BLUELAB_USERNAME" ujust dx-group
        log_info "Docker groups configured via ujust dx-group"
        log_warn "User will need to log out and back in for Docker groups to take effect"
    else
        log_warn "ujust command not found, manually adding user to docker group"
        usermod -a -G docker "$BLUELAB_USERNAME"
    fi
}

# Configure system hostname and timezone
setup_system() {
    log_info "Configuring system settings"
    
    # Set hostname (unless hostname-based access already set it to "bluelab")
    if [ "${BLUELAB_USE_HOSTNAME:-false}" != "true" ]; then
        hostnamectl set-hostname "$BLUELAB_HOSTNAME"
        log_info "Hostname set to: $BLUELAB_HOSTNAME"
    else
        log_info "Hostname already configured for BlueLab branding (bluelab)"
    fi
    
    # Set timezone
    timedatectl set-timezone "$BLUELAB_TIMEZONE"
    log_info "Timezone set to: $BLUELAB_TIMEZONE"
    
    # Fix /etc/hosts for proper hostname resolution
    log_info "Configuring /etc/hosts for proper hostname resolution"
    
    # Get the actual network IP (not localhost)
    local network_ip
    network_ip=$(ip route get 1.1.1.1 | awk '{print $7; exit}' 2>/dev/null)
    
    if [ -n "$network_ip" ] && [ "$network_ip" != "127.0.0.1" ]; then
        # Remove old entries for this hostname
        sed -i "/\s*$BLUELAB_HOSTNAME\s*/d" /etc/hosts
        sed -i "/\s*$BLUELAB_HOSTNAME\.local\s*/d" /etc/hosts
        
        # Add new entry with network IP
        echo "$network_ip $BLUELAB_HOSTNAME $BLUELAB_HOSTNAME.local" >> /etc/hosts
        log_info "Updated /etc/hosts: $network_ip -> $BLUELAB_HOSTNAME.local"
    else
        log_warn "Could not determine network IP, using localhost fallback"
        # Ensure localhost entry exists
        if ! grep -q "$BLUELAB_HOSTNAME" /etc/hosts; then
            echo "127.0.1.1 $BLUELAB_HOSTNAME $BLUELAB_HOSTNAME.local" >> /etc/hosts
        fi
    fi
}

# Configure Tailscale if auth key provided
setup_tailscale() {
    if [ -n "$BLUELAB_TAILSCALE_KEY" ]; then
        log_info "Setting up Tailscale with provided auth key"
        
        # Enable Tailscale using ujust (Bluefin way)
        if command -v ujust &>/dev/null; then
            log_info "Enabling Tailscale via ujust toggle-tailscale"
            echo "yes" | ujust toggle-tailscale || {
                log_warn "ujust toggle-tailscale failed, trying manual setup"
                systemctl enable --now tailscaled
            }
        else
            log_info "ujust not available, enabling Tailscale manually"
            systemctl enable --now tailscaled
        fi
        
        # Wait for Tailscale daemon to be ready
        local retry_count=0
        while ! tailscale status &>/dev/null && [ $retry_count -lt 15 ]; do
            log_info "Waiting for Tailscale daemon... (attempt $((retry_count + 1)))"
            sleep 2
            retry_count=$((retry_count + 1))
        done
        
        # Authenticate with the provided key using "bluelab" hostname
        if tailscale status &>/dev/null; then
            log_info "Authenticating Tailscale with auth key and hostname 'bluelab'"
            tailscale up --authkey="$BLUELAB_TAILSCALE_KEY" --hostname="bluelab" --accept-routes
            log_info "Tailscale setup completed - device will appear as 'bluelab' on your network"
        else
            log_error "Tailscale daemon failed to start"
        fi
    else
        log_info "No Tailscale auth key provided, skipping Tailscale setup"
    fi
}

# Generate configuration files
generate_configs() {
    log_info "Generating BlueLab configuration files"
    
    # Global configuration
    cat > "$CONFIG_DIR/config/global.env" << EOF
# BlueLab Global Configuration
BLUELAB_USERNAME=$BLUELAB_USERNAME
BLUELAB_HOSTNAME=$BLUELAB_HOSTNAME
BLUELAB_TIMEZONE=$BLUELAB_TIMEZONE
BLUELAB_VERSION=Phase1
BLUELAB_INSTALL_DATE=$(date -Iseconds)

# Credential Management
BLUELAB_CREDENTIAL_STRATEGY=${BLUELAB_CREDENTIAL_STRATEGY:-system}
BLUELAB_CREDENTIAL_FILE=${BLUELAB_CREDENTIAL_FILE:-}

# Docker configuration
DOCKER_DATA_ROOT=/var/lib/bluelab/data
COMPOSE_PROJECT_NAME=bluelab

# Network configuration - Using host networking for simplicity
BLUELAB_NETWORK_MODE=host
HOST_IP=$(hostname -I | awk '{print $1}')

# Future features
BLUELAB_LIVE_ISO_AVAILABLE=${BLUELAB_LIVE_ISO_AVAILABLE:-false}
BLUELAB_AUTOMATED_INSTALL_AVAILABLE=${BLUELAB_AUTOMATED_INSTALL_AVAILABLE:-false}
EOF

    # Save credential strategy for future reference
    if [ -n "$BLUELAB_CREDENTIAL_FILE" ] && [ -f "$BLUELAB_CREDENTIAL_FILE" ]; then
        log_info "Credential file saved: $BLUELAB_CREDENTIAL_FILE"
        echo "🔐 Credentials saved securely"
        echo "   Strategy: $BLUELAB_CREDENTIAL_STRATEGY"
        echo "   File: $BLUELAB_CREDENTIAL_FILE"
        echo "   Future: Can be imported to Bitwarden (Security Stack)"
    fi

    log_info "Global configuration generated"
}

# Deploy monitoring stack (Phase 1 requirement - ALWAYS deployed)
deploy_monitoring_stack() {
    log_info "Deploying monitoring stack (mandatory for all BlueLab installations)"
    
    # Monitoring stack is always deployed - no conditional check needed
    
    # Ensure Docker daemon is running
    log_info "Ensuring Docker daemon is running"
    systemctl enable docker
    systemctl start docker
    
    # Wait for Docker to be ready
    local retry_count=0
    while ! docker info &>/dev/null && [ $retry_count -lt 30 ]; do
        log_info "Waiting for Docker daemon to be ready... (attempt $((retry_count + 1)))"
        sleep 2
        retry_count=$((retry_count + 1))
    done
    
    if ! docker info &>/dev/null; then
        log_error "Docker daemon failed to start after 60 seconds"
        return 1
    fi
    
    log_info "Docker daemon is ready"
    
    # Create monitoring stack directory
    mkdir -p "$CONFIG_DIR/stacks/monitoring"
    
    # Generate basic docker-compose for monitoring (using host networking)
    cat > "$CONFIG_DIR/stacks/monitoring/docker-compose.yml" << EOF
version: '3.8'

services:
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: bluelab-homepage
    network_mode: host
    volumes:
      - /var/lib/bluelab/data/monitoring/homepage:/app/config
    restart: unless-stopped
    environment:
      - PORT=3000

  dockge:
    image: louislam/dockge:1
    container_name: bluelab-dockge
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/bluelab/data/monitoring/dockge:/app/data
      - /var/lib/bluelab/stacks:/opt/stacks
    restart: unless-stopped
    environment:
      - DOCKGE_STACKS_DIR=/opt/stacks
      - PORT=5001
EOF

        # No need for custom networks with host networking
        
        # Start monitoring stack as the target user (who has Docker permissions)
        log_info "Starting monitoring stack as user: $BLUELAB_USERNAME"
        
        # Run docker-compose as the target user with Docker group permissions
        sudo -u "$BLUELAB_USERNAME" bash -c "cd '$CONFIG_DIR/stacks/monitoring' && docker-compose up -d"
        
        # Verify containers are running
        if sudo -u "$BLUELAB_USERNAME" docker ps -q --filter "name=bluelab-homepage" | grep -q .; then
            log_info "Homepage container started successfully"
        else
            log_error "Homepage container failed to start"
        fi
        
        if sudo -u "$BLUELAB_USERNAME" docker ps -q --filter "name=bluelab-dockge" | grep -q .; then
            log_info "Dockge container started successfully"
        else
            log_error "Dockge container failed to start"
        fi
        
        log_info "Monitoring stack deployment completed"
}

# Handle additional stack selections (Phase 2+ features)
deploy_additional_stacks() {
    if [ -n "$BLUELAB_STACK_SELECTION" ]; then
        log_info "Processing additional stack selections: $BLUELAB_STACK_SELECTION"
        
        # Split stack selection by commas and process each
        IFS=',' read -ra STACKS <<< "$BLUELAB_STACK_SELECTION"
        for stack in "${STACKS[@]}"; do
            # Trim whitespace
            stack=$(echo "$stack" | xargs)
            
            case "$stack" in
                "media")
                    log_warn "📺 Media Stack (Jellyfin, Sonarr, Radarr): Coming in Phase 2!"
                    log_info "   Will include: Jellyfin media server, Sonarr/Radarr for automation"
                    ;;
                "audio")
                    log_warn "🎵 Audio Stack (Navidrome, Lidarr): Coming in Phase 2!"
                    log_info "   Will include: Navidrome music server, Lidarr for music automation"
                    ;;
                "photos")
                    log_warn "📸 Photos Stack (Immich): Coming in Phase 2!"
                    log_info "   Will include: Immich photo management and organization"
                    ;;
                "books")
                    log_warn "📚 Books Stack (Calibre, Readarr): Coming in Phase 2!"
                    log_info "   Will include: Calibre ebook server, Readarr for book automation"
                    ;;
                "productivity")
                    log_warn "💼 Productivity Stack (Nextcloud): Coming in Phase 3!"
                    log_info "   Will include: Nextcloud file sync and collaboration tools"
                    ;;
                "gaming")
                    log_warn "🎮 Gaming Stack (Steam, Lutris): Coming in Phase 2!"
                    log_info "   Will include: ujust gaming integration, Steam, Lutris/Heroic"
                    ;;
                "smb-share")
                    log_warn "🗂️ SMB Share Stack (ZFS, Samba): Coming in Phase 3!"
                    log_info "   Will include: ZFS storage management, Samba file sharing"
                    ;;
                "monitoring")
                    log_info "📊 Monitoring Stack: Already deployed (mandatory)"
                    ;;
                "")
                    # Empty string, skip
                    ;;
                *)
                    log_warn "❓ Unknown stack '$stack' - skipping"
                    ;;
            esac
        done
        
        if [ "${#STACKS[@]}" -gt 0 ]; then
            echo ""
            log_info "🚀 Additional stacks will be available in future phases"
            log_info "   For now, use the monitoring stack to manage your system:"
            log_info "   • Homepage: http://$BLUELAB_HOSTNAME.local:3000"
            log_info "   • Dockge:   http://$BLUELAB_HOSTNAME.local:5001"
        fi
    else
        log_info "No additional stacks selected - monitoring stack only"
    fi
}

# TODO: Phase 2+ - Setup ZFS Personal Cloud Drive (SMB Share Stack)
setup_zfs_cloud_drive() {
    if [ "${BLUELAB_SETUP_ZFS_CLOUD:-false}" = "true" ]; then
        log_info "Setting up ZFS personal cloud drive and SMB share"
        
        # 1. Detect largest drive (excluding system drive)
        # local largest_drive
        # largest_drive=$(lsblk -d -p -n -o NAME,SIZE --bytes | grep -v "$(findmnt -n -o SOURCE /)" | sort -k2 -nr | head -n1 | awk '{print $1}')
        
        # 2. Create ZFS pool
        # log_info "Creating ZFS pool 'cloud' on drive: $largest_drive"
        # zpool create cloud "$largest_drive"
        
        # 3. Create ZFS datasets for personal cloud storage
        # zfs create cloud/documents     # Office docs, PDFs, etc.
        # zfs create cloud/photos        # Photo storage and albums
        # zfs create cloud/videos        # Personal videos and movies
        # zfs create cloud/music         # Music collection
        # zfs create cloud/downloads     # Download staging area
        # zfs create cloud/backups       # Backup storage
        # zfs create cloud/shared        # Family/household shared files
        
        # 4. Set permissions
        # chown -R "$BLUELAB_USERNAME:$BLUELAB_USERNAME" /cloud
        
        # 5. Install and configure Samba
        # dnf install -y samba samba-common-tools
        # 
        # # Generate SMB configuration
        # cat > /etc/samba/smb.conf << EOF
        # [global]
        #     workgroup = WORKGROUP
        #     server string = BlueLab Personal Cloud
        #     security = user
        #     map to guest = Bad User
        #     
        # [cloud]
        #     path = /cloud
        #     browseable = yes
        #     writable = yes
        #     guest ok = no
        #     valid users = $BLUELAB_USERNAME
        #     comment = Personal Cloud Storage
        # EOF
        # 
        # # Set SMB password (same as user password)
        # (echo "$BLUELAB_PASSWORD"; echo "$BLUELAB_PASSWORD") | smbpasswd -a "$BLUELAB_USERNAME"
        # 
        # # Enable and start services
        # systemctl enable smb nmb
        # systemctl start smb nmb
        
        log_warn "🚧 ZFS Personal Cloud Drive setup will be implemented in Phase 2+"
        log_info "   Will include: ZFS pool, SMB shares, Tailscale integration"
        log_info "   Access will be: \\\\bluelab.local\\cloud and \\\\bluelab\\cloud"
    else
        log_info "ZFS personal cloud drive setup skipped"
    fi
}

# Main execution
main() {
    log_info "BlueLab First Boot Configuration starting"
    
    # Parse parameters
    parse_kernel_parameters
    
    # Interactive setup for missing parameters
    interactive_setup
    
    # Setup system
    setup_directories
    setup_user
    setup_system
    setup_tailscale
    generate_configs
    deploy_monitoring_stack
    deploy_additional_stacks
    setup_zfs_cloud_drive
    
    log_info "🎉 BlueLab first boot configuration completed successfully!"
    
    log_info "=========================================="
    log_info "IMPORTANT: Please log out and back in to activate Docker group permissions"
    log_info ""
    log_info "🎮 UJUST COMMANDS:"
    log_info "  • ujust bluelab-interactive-setup   - Reconfigure BlueLab system"
    log_info "  • ujust bluelab-status  - Show service status and URLs"
    log_info "  • ujust bluelab-logs    - View system logs"
    log_info "  • ujust bluelab-reset   - Reset configuration (advanced)"
    log_info ""
    log_info "🌐 ACCESS YOUR BLUELAB SERVICES:"
    
    if [ "${BLUELAB_USE_HOSTNAME:-false}" = "true" ]; then
        log_info ""
        log_info "📱 LOCAL NETWORK (same WiFi/ethernet):"
        log_info "  • Homepage: http://bluelab.local:3000"
        log_info "  • Dockge:   http://bluelab.local:5001"
        
        if [ -n "$BLUELAB_TAILSCALE_KEY" ]; then
            log_info ""
            log_info "🌍 REMOTE ACCESS (from anywhere via Tailscale):"
            log_info "  • Homepage: http://bluelab:3000"
            log_info "  • Dockge:   http://bluelab:5001"
            log_info ""
            log_info "💡 Bookmark these URLs - they work from any device on your Tailscale!"
        fi
        
        log_info ""
        log_info "✨ Benefits of hostname access:"
        log_info "  ✓ Easy to remember (no numbers!)"
        log_info "  ✓ Works even if your IP changes"
        log_info "  ✓ Professional BlueLab branding"
    else
        local host_ip
        host_ip=$(hostname -I | awk '{print $1}')
        log_info ""
        log_info "📱 LOCAL ACCESS:"
        log_info "  • Homepage: http://${host_ip}:3000"
        log_info "  • Dockge:   http://${host_ip}:5001"
        
        if [ -n "$BLUELAB_TAILSCALE_KEY" ]; then
            log_info ""
            log_info "🌍 REMOTE ACCESS (via Tailscale):"
            log_info "  • Homepage: http://bluelab:3000"
            log_info "  • Dockge:   http://bluelab:5001"
        fi
    fi
    
    log_info ""
    log_info "🚀 Your BlueLab homelab is ready!"
    log_info "=========================================="
}

# Execute main function
main